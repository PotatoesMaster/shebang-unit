#!/bin/bash

# Shebang unit all in one source file

#Beginning of constants.sh
SBU_DEFAULT_TEST_FILE_PATTERN=*_test.sh

SBU_GREEN_COLOR_CODE="\\033[1;32m"
SBU_RED_COLOR_CODE="\\033[1;31m"
SBU_DEFAULT_COLOR_CODE="\\e[0m"

SBU_GLOBAL_SETUP_FUNCTION_NAME="global_setup"
SBU_GLOBAL_TEARDOWN_FUNCTION_NAME="global_teardown"
SBU_SETUP_FUNCTION_NAME="setup"
SBU_TEARDOWN_FUNCTION_NAME="teardown"

SBU_SUCCESS_STATUS_CODE=0
SBU_FAILURE_STATUS_CODE=1
#End of constants.sh

#Beginning of system.sh
function system::get_string_or_default_if_empty() {
	local string=$1
	local default_string=$2
	local result=${string}
	if [[ -z "${string}" ]]; then
		result="${default_string}"
	fi
	printf "${result}"
}

function system::get_date_in_seconds() {
	date +%s
}

function system::print_with_color() {
	printf "$2$1$3\n"
}

function system::array_contains() {
	local value=${1}
	local array=("${@:2}")
	local i; for (( i=0; i < ${#array[@]}; i++ )); do
		if [[ "${array[${i}]}" == "${value}" ]]; then
			return ${SBU_SUCCESS_STATUS_CODE}
		fi
	done
	return ${SBU_FAILURE_STATUS_CODE}
}

function system::print_array() {
	local array=("${@}")
	local array_as_string=""
	local i; for (( i=0; i < ${#array[@]}; i++ )); do
		array_as_string+="${array[${i}]}, "
	done
	array_as_string=${array_as_string/%, /}
	printf "[%s]" "${array_as_string}"
}

function system::string_contains() {
	[[ "$1" == *"$2"* ]]
}
#End of system.sh

#Beginning of assertion.sh
function assertion::equal() {
	local expected=$1
	local actual=$2
	if [[ "${expected}" != "${actual}" ]]; then
		assertion::_assertion_failed "Actual: <${actual}>, expected: <${expected}>."
	fi
}

function assertion::string_contains() {
	local container=$1
	local contained=$2
	if ! system::string_contains "${container}" "${contained}"; then
		assertion::_assertion_failed "String: <${container}> does not contain: <${contained}>."
	fi
}

function assertion::string_does_not_contain() {
	local container=$1
	local contained=$2
	if system::string_contains "${container}" "${contained}"; then
		assertion::_assertion_failed "String: <${container}> contains: <${contained}>."
	fi
}

function assertion::array_contains() {
	local element=$1
	local array=("${@:2}")
	if ! system::array_contains "${element}" "${array[@]}"; then
		local array_as_string="$(system::print_array "${array[@]}")"
		assertion::_assertion_failed "Array: <${array_as_string}> does not contain: <${element}>."
	fi
}

function assertion::array_does_not_contains() {
	local element=$1
	local array=("${@:2}")
	if system::array_contains "${element}" "${array[@]}"; then
		local array_as_string="$(system::print_array "${array[@]}")"
		assertion::_assertion_failed "Array: <${array_as_string}> contains: <${element}>."
	fi
}

function assertion::status_code_is_success() {
	local status_code=$1
	local custom_message=$2
	if (( ${status_code} != ${SBU_SUCCESS_STATUS_CODE} )); then
		assertion::_assertion_failed "Status code is failure instead of success." "${custom_message}"
	fi
}

function assertion::status_code_is_failure() {
	local status_code=$1
	local custom_message=$2
	if (( ${status_code} == ${SBU_SUCCESS_STATUS_CODE} )); then
		assertion::_assertion_failed "Status code is success instead of failure." "${custom_message}"
	fi
}

function assertion::_assertion_failed() {
	local message=$1
	local custom_message=$2
	local message_to_use="$(assertion::_get_assertion_message_to_use "${message}" "${custom_message}")"
	printf "Assertion failed. ${message_to_use}\n"
	exit ${SBU_FAILURE_STATUS_CODE}
}

function assertion::_get_assertion_message_to_use() {
	local message=$1
	local custom_messsage=$2
	if [[ -n "${custom_messsage}" ]]; then
		printf "%s %s\n" "${message}" "${custom_messsage}"
	else
		printf "${message}\n"
	fi
}
#End of assertion.sh

#Beginning of parser.sh
function parser::get_public_functions_in_file() {
	local file=$1
	local functions=()
	parser::_find_functions_in_file "${file}" | parser::_filter_private_functions | {
		local name; while read name; do
			printf "${name} "
		done
	}
}

function parser::_find_functions_in_file() {
	local file=$1
	grep -o "^function.*()" "${file}" | parser::_get_function_name_from_declaration | tr -d " "
}

function parser::_filter_private_functions() {
	grep -v "^_.*"
}

function parser::_get_function_name_from_declaration() {
	sed "s/function\(.*\)()/\1/"
}
#End of parser.sh

#Beginning of runner.sh
function runner::run_all_test_files_in_directory() {
	local directory=$1
	local overriden_test_file_pattern=$2

	runner::_initialise_tests_execution
	local test_file_pattern="$(system::get_string_or_default_if_empty "${overriden_test_file_pattern}" "${SBU_DEFAULT_TEST_FILE_PATTERN}")"
	runner::_run_all_test_files_with_pattern_in_directory "${test_file_pattern}" "${directory}"
	runner::_print_tests_results
	runner::_tests_are_successful
}

function runner::_initialise_tests_execution() {
	_GREEN_TESTS_COUNT=0
	_RED_TESTS_COUNT=0
	_EXECUTION_BEGINING_DATE="$(system::get_date_in_seconds)"
}

function runner::_run_all_test_files_with_pattern_in_directory() {
	local test_file_pattern=$1
	local directory=$2

	local file; for file in $(find "${directory}" -name ${test_file_pattern}); do
		runner::_run_test_file "${file}"
	done
}

function runner::_run_test_file() {
	local file=$1
	printf "[File] ${file}\n"
	source "${file}"
	local public_functions=($(parser::get_public_functions_in_file "${file}"))
	runner::_call_function_if_existing_in_array "${SBU_GLOBAL_SETUP_FUNCTION_NAME}" "${public_functions[@]}"
	runner::_call_all_tests "${public_functions[@]}"
	runner::_call_function_if_existing_in_array "${SBU_GLOBAL_TEARDOWN_FUNCTION_NAME}" "${public_functions[@]}"
	printf "\n"
}

function runner::_call_all_tests() {
	local functions=("$@")
	local i; for (( i=0; i < ${#functions[@]}; i++ )); do
		local function="${functions[${i}]}"
		if runner::_function_is_a_test "${function}"; then
			runner::_call_test_function_in_the_middle_of_setup_and_teardown "${function}" "${functions[@]}"
		fi
	done
}

function runner::_function_is_a_test() {
	local special_functions=("${SBU_GLOBAL_SETUP_FUNCTION_NAME}"
							 "${SBU_GLOBAL_TEARDOWN_FUNCTION_NAME}"
							 "${SBU_SETUP_FUNCTION_NAME}"
							 "${SBU_TEARDOWN_FUNCTION_NAME}")
	! system::array_contains "${1}" "${special_functions[@]}"
}

function runner::_call_test_function_in_the_middle_of_setup_and_teardown() {
	local test_function=$1
	local functions=("${@:2}")

	printf "[Test] ${test_function}\n"
	( runner::_call_function_if_existing_in_array "${SBU_SETUP_FUNCTION_NAME}" "${functions[@]}" &&
	( ${test_function} ) &&
	runner::_call_function_if_existing_in_array "${SBU_TEARDOWN_FUNCTION_NAME}" "${functions[@]}" )
	runner::_parse_test_function_result "${test_function}" $?
}

function runner::_parse_test_function_result() {
	local test_function=$1
	local status_code=$2

	if (( ${status_code} == ${SBU_SUCCESS_STATUS_CODE} )); then
		(( _GREEN_TESTS_COUNT++ ))
		runner::_print_with_color "OK" ${SBU_GREEN_COLOR_CODE}
	else
		(( _RED_TESTS_COUNT++ ))
		runner::_print_with_color "KO" ${SBU_RED_COLOR_CODE}
	fi
}

function runner::_print_tests_results() {
	printf "[Results]\n"
	local color="$(runner::_getColorCodeForTestsResult)"
	local execution_time="$(runner::_get_execution_time)"
	runner::_print_with_color "Green tests : ${_GREEN_TESTS_COUNT}, red : ${_RED_TESTS_COUNT} in ${execution_time}s" "${color}"
}

function runner::_getColorCodeForTestsResult() {
	local color_code=${SBU_GREEN_COLOR_CODE}
	if ! runner::_tests_are_successful; then
		color_code=${SBU_RED_COLOR_CODE}
	fi
	printf "${color_code}"
}

function runner::_get_execution_time() {
	local ending_date="$(system::get_date_in_seconds)"
	printf "$((${ending_date} - ${_EXECUTION_BEGINING_DATE}))"
}

function runner::_print_with_color() {
	local text=$1
	local color_code=$2
	system::print_with_color "${text}" "${color_code}" "${SBU_DEFAULT_COLOR_CODE}"
}

function runner::_tests_are_successful() {
	(( ${_RED_TESTS_COUNT} == 0 ))
}

function runner::_call_function_if_existing_in_array() {
	local function=$1
	local functions=("${@:2}")
	if system::array_contains "${function}" "${functions[@]}"; then
		eval ${function}
	fi
}
#End of runner.sh

# Beginning of executable code
runner::run_all_test_files_in_directory $@
#End of executable code
